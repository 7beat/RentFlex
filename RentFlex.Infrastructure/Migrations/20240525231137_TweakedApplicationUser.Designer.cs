// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentFlex.Infrastructure.Data;

#nullable disable

namespace RentFlex.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240525231137_TweakedApplicationUser")]
    partial class TweakedApplicationUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RentFlex.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AirbnbReference")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingReference")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("RentFlex.Domain.entities.Estate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AirbnbReference")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingReference")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CostPerDay")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThumbnailImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Estates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("555daf1f-c760-48d4-9fcf-410cec349f23"),
                            AirbnbReference = new Guid("9d1063e1-125e-45c6-bef3-d5baaa717152"),
                            BookingReference = new Guid("9d1063e1-125e-45c6-bef3-d5baaa717152"),
                            CostPerDay = 200.0,
                            Description = "Serene, Elegant, Nature-Inspired Haven. Perfect for couples and families.",
                            EstateType = "Apartment",
                            IsAvailable = true,
                            PropertyName = "Cosy Retreat"
                        });
                });

            modelBuilder.Entity("RentFlex.Domain.entities.Rental", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("EstateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EstateId");

                    b.ToTable("Rentals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92612953-9caa-46a9-aa78-cf3cbc246558"),
                            EndDate = new DateTime(2024, 5, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EstateId = new Guid("555daf1f-c760-48d4-9fcf-410cec349f23"),
                            RentType = "ShortTerm",
                            StartDate = new DateTime(2024, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RentFlex.Domain.entities.Estate", b =>
                {
                    b.HasOne("RentFlex.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Estates")
                        .HasForeignKey("UserId");

                    b.OwnsOne("RentFlex.Domain.entities.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("EstateId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("PropertyNumber")
                                .HasColumnType("int");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EstateId");

                            b1.ToTable("Estates");

                            b1.WithOwner()
                                .HasForeignKey("EstateId");

                            b1.HasData(
                                new
                                {
                                    EstateId = new Guid("555daf1f-c760-48d4-9fcf-410cec349f23"),
                                    City = "Gdańsk",
                                    Country = "Poland",
                                    PostalCode = "80-342",
                                    PropertyNumber = 11,
                                    StreetName = "Grunwaldzka"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("RentFlex.Domain.entities.Rental", b =>
                {
                    b.HasOne("RentFlex.Domain.entities.Estate", "Estate")
                        .WithMany("Rentals")
                        .HasForeignKey("EstateId");

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("RentFlex.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Estates");
                });

            modelBuilder.Entity("RentFlex.Domain.entities.Estate", b =>
                {
                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
